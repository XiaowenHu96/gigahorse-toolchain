function 0x6e8(0x6e8arg0x0, 0x6e8arg0x1, 0x6e8arg0x2) private {
    Begin block 0x6e8
    prev=[], succ=[0x6ec]
    0x6e9: v6e9(0x0) = CONST 

    Begin block 0x6ec
    prev=[0x6e8, 0x747], succ=[0x6f7, 0x74f]
    0x6ec_0x0: v6ec_0 = PHI v6e9(0x0), v74a
    0x6ed: v6ed(0x5) = CONST 
    0x6ef: v6ef = SLOAD v6ed(0x5)
    0x6f1: v6f1 = LT v6ec_0, v6ef
    0x6f2: v6f2 = ISZERO v6f1
    0x6f3: v6f3(0x74f) = CONST 
    0x6f6: JUMPI v6f3(0x74f), v6f2

    Begin block 0x6f7
    prev=[0x6ec], succ=[0x6fe, 0x715]
    0x6f9: v6f9 = ISZERO v6e8arg1
    0x6fa: v6fa(0x715) = CONST 
    0x6fd: JUMPI v6fa(0x715), v6f9

    Begin block 0x6fe
    prev=[0x6f7], succ=[0x715]
    0x6fe_0x1: v6fe_1 = PHI v6e9(0x0), v74a
    0x6ff: v6ff(0x0) = CONST 
    0x703: MSTORE v6ff(0x0), v6fe_1
    0x704: v704(0x20) = CONST 
    0x708: MSTORE v704(0x20), v6ff(0x0)
    0x709: v709(0x40) = CONST 
    0x70c: v70c = SHA3 v6ff(0x0), v709(0x40)
    0x70d: v70d(0x3) = CONST 
    0x70f: v70f = ADD v70d(0x3), v70c
    0x710: v710 = SLOAD v70f
    0x711: v711(0xff) = CONST 
    0x713: v713 = AND v711(0xff), v710
    0x714: v714 = ISZERO v713

    Begin block 0x715
    prev=[0x6f7, 0x6fe], succ=[0x71b, 0x739]
    0x715_0x0: v715_0 = PHI v714, v6e8arg1
    0x717: v717(0x739) = CONST 
    0x71a: JUMPI v717(0x739), v715_0

    Begin block 0x71b
    prev=[0x715], succ=[0x723, 0x739]
    0x71e: v71e = ISZERO v6e8arg0
    0x71f: v71f(0x739) = CONST 
    0x722: JUMPI v71f(0x739), v71e

    Begin block 0x723
    prev=[0x71b], succ=[0x739]
    
    0x723_0x1: v723_1 = PHI v6e9(0x0), v74a
    0x724: v724(0x0) = CONST 
    0x728: MSTORE v724(0x0), v723_1
    0x729: v729(0x20) = CONST 
    0x72d: MSTORE v729(0x20), v724(0x0)
    0x72e: v72e(0x40) = CONST 
    0x731: v731 = SHA3 v724(0x0), v72e(0x40)
    0x732: v732(0x3) = CONST 
    0x734: v734 = ADD v732(0x3), v731
    0x735: v735 = SLOAD v734
    0x736: v736(0xff) = CONST 
    0x738: v738 = AND v736(0xff), v735

    Begin block 0x739
    prev=[0x715, 0x71b, 0x723], succ=[0x73a]
   

    Begin block 0x73a
    prev=[0x739], succ=[0x740, 0x746]
  
    0x73a_0x0: v73a_0 = PHI v714, v738, v6e8arg0, v6e8arg1
    0x73b: v73b = ISZERO v73a_0
    0x73c: v73c(0x746) = CONST 
    0x73f: JUMPI v73c(0x746), v73b

    Begin block 0x740
    prev=[0x73a], succ=[0x746]

    0x740: v740(0x1) = CONST 
    0x740_0x1: v740_1 = PHI v6e9(0x0), v743
    0x743: v743 = ADD v740_1, v740(0x1)

    Begin block 0x746
    prev=[0x73a, 0x740], succ=[0x747]


    Begin block 0x747
    prev=[0x746], succ=[0x6ec]

    0x747_0x0: v747_0 = PHI v6e9(0x0), v74a
    0x748: v748(0x1) = CONST 
    0x74a: v74a = ADD v748(0x1), v747_0
    0x74b: v74b(0x6ec) = CONST 
    0x74e: JUMP v74b(0x6ec)

    Begin block 0x74f
    prev=[0x6ec], succ=[0x750]


    Begin block 0x750
    prev=[0x74f], succ=[]

    0x750_0x1: v750_1 = PHI v6e9(0x0), v743
    0x756: RETURNPRIVATE v6e8arg2, v750_1

}
